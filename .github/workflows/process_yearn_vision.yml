name: process-yearn-vision

on:
  workflow_dispatch:
    inputs:
      eth_provider:
        description: "ETH_PROVIDER in .env.example"
        required: true
      etherscan_token:
        description: "ETHERSCAN_TOKEN in .env.example"
        required: true
      ftm_provider:
        description: "FTM_PROVIDER in .env.example"
        default: https://rpc.ftm.tools/
        required: false
      ftmscan_token:
        description: "FTMSCAN_TOKEN in .env.example"
        required: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: mask inputs
        id: mask-inputs
        run: |
          eth_provider=$(cat $GITHUB_EVENT_PATH | jq -r '.inputs.eth_provider')
          echo "::add-mask::$eth_provider"
          echo "::set-output name=eth-provider::$eth_provider"

          etherscan_token=$(cat $GITHUB_EVENT_PATH | jq -r '.inputs.etherscan_token')
          echo "::add-mask::$etherscan_token"
          echo "::set-output name=etherscan-token::$etherscan_token"

          ftm_provider=$(cat $GITHUB_EVENT_PATH | jq -r '.inputs.ftm_provider')
          echo "::add-mask::$ftm_provider"
          echo "::set-output name=ftm-provider::$ftm_provider"

          ftmscan_token=$(cat $GITHUB_EVENT_PATH | jq -r '.inputs.ftmscan_token')
          echo "::add-mask::$ftmscan_token"
          echo "::set-output name=ftmscan-token::$ftmscan_token"

      - name: generate random number
        id: random
        run: echo ::set-output name=value::$(echo $RANDOM)

      - name: checkout repository
        uses: actions/checkout@v3

      - name: setup python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: use poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: "1.2.0"

      - name: install python packages
        run: poetry install
        working-directory: ./scripts

      - name: execute python scripts
        env:
          ETH_PROVIDER: ${{ steps.mask-inputs.outputs.eth-provider }}
          ETHERSCAN_TOKEN: ${{ steps.mask-inputs.outputs.etherscan-token }}
          FTM_PROVIDER: ${{ steps.mask-inputs.outputs.ftm-provider }}
          FTMSCAN_TOKEN: ${{ steps.mask-inputs.outputs.ftmscan-token }}
        run: |
          poetry run python process_yearn_vision/apy.py
          poetry run python process_yearn_vision/main.py
        working-directory: ./scripts

      - name: check for modified files
        id: git-check
        run: echo ::set-output name=modified::$(if [ -n "$(git status --porcelain)" ]; then echo "true"; else echo "false"; fi)

      - name: checkout branch
        if: steps.git-check.outputs.modified == 'true'
        run: git checkout -b fix/process-yearn-vision-${{ steps.random.outputs.value }}

      - name: commit file
        if: steps.git-check.outputs.modified == 'true'
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git add -A
          git commit -m '[automated commit] fix: Update output.csv'
          git push -u origin fix/process-yearn-vision-${{ steps.random.outputs.value }}

      - name: create pull request
        uses: actions/github-script@v6
        if: steps.git-check.outputs.modified == 'true'
        with:
          script: |
            const { repo, owner } = context.repo;
            const result = await github.rest.pulls.create({
              title: '[ref-${{ steps.random.outputs.value }}] Process Yearn Vision',
              owner,
              repo,
              head: 'fix/process-yearn-vision-${{ steps.random.outputs.value }}',
              base: '${{ github.ref_name }}',
              body: [
                'This PR is auto-generated by',
                '[actions/github-script](https://github.com/actions/github-script).'
              ].join('\n'),
              maintainer_can_modify: true,
            });
            github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: result.data.number,
              labels: ['automated pr']
            });
