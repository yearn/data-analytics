name: Script - Vault APY

env:
  ETH_PROVIDER: ${{ secrets.ETH_PROVIDER }}
  FTM_PROVIDER: ${{ secrets.FTM_PROVIDER }}
  ARB_PROVIDER: ${{ secrets.ARB_PROVIDER }}
  OPT_PROVIDER: ${{ secrets.OPT_PROVIDER }}
  ETHERSCAN_TOKEN: ${{ secrets.ETHERSCAN_TOKEN }}
  FTMSCAN_TOKEN: ${{ secrets.FTMSCAN_TOKEN }}
  ARBISCAN_TOKEN: ${{ secrets.ARBISCAN_TOKEN }}
  OPTISCAN_TOKEN: ${{ secrets.OPTISCAN_TOKEN }}

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: generate random number
        id: random
        run: echo ::set-output name=value::$(echo $RANDOM)

      - name: checkout repository
        uses: actions/checkout@v3

      - name: setup python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: use poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: "1.2.0"

      - name: install python packages
        run: poetry install
        working-directory: ./packages/scripts

      - name: execute python script
        run: poetry run python vault_apy/main.py
        working-directory: ./packages/scripts

      - name: check for modified files
        id: git-check
        run: echo ::set-output name=modified::$(if [ -n "$(git status --porcelain)" ]; then echo "true"; else echo "false"; fi)

      - name: checkout branch
        if: steps.git-check.outputs.modified == 'true'
        run: git checkout -b fix/vault-apy-${{ steps.random.outputs.value }}

      - name: commit file
        if: steps.git-check.outputs.modified == 'true'
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git add -A
          git commit -m '[automated commit] fix: Update output.csv'
          git push -u origin fix/vault-apy-${{ steps.random.outputs.value }}

      - name: create pull request
        uses: actions/github-script@v6
        if: steps.git-check.outputs.modified == 'true'
        with:
          script: |
            const { repo, owner } = context.repo;
            const result = await github.rest.pulls.create({
              title: '[ref-${{ steps.random.outputs.value }}] Fetch APY Values',
              owner,
              repo,
              head: 'fix/vault-apy-${{ steps.random.outputs.value }}',
              base: '${{ github.ref_name }}',
              body: [
                'This PR is auto-generated by',
                '[actions/github-script](https://github.com/actions/github-script).'
              ].join('\n'),
              maintainer_can_modify: true,
            });
            github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: result.data.number,
              labels: ['automated pr']
            });
